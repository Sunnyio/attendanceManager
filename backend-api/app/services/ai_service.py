# app/services/ai_service.py
import anthropic
import openai
from google import genai
import logging
from fastapi import HTTPException
from typing import List, Dict, Any, Optional
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

from app.config import settings

# Configure logging
logger = logging.getLogger(__name__)

# Define retry decorator for AI API calls
ai_retry = retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=1, max=10),
    reraise=True
)

def _get_attendance_data(conn) -> str:
    """
    Get formatted attendance data for AI analysis
    
    Args:
        conn: Database connection
        
    Returns:
        Formatted attendance data as a string
    """
    cursor = conn.cursor()
    cursor.execute(
        "SELECT employee_id, date, status, department FROM attendance ORDER BY date DESC"
    )
    records = cursor.fetchall()
    
    # Format data for better AI analysis
    return "\n".join([
        f"Employee {r['employee_id']} from {r['department']} was {r['status']} on {r['date']}" 
        for r in records
    ])

@ai_retry
def _get_claude_insights(text_data: str, user_query: str) -> str:
    """Generate insights using Claude AI"""
    try:
        client = anthropic.Anthropic(api_key=settings.ANTHROPIC_API_KEY)
        response = client.messages.create(
            model="claude-3.7-sonnet-2024-03-25",
            max_tokens=1000,
            messages=[
                {"role": "system", "content": "You are an AI assistant analyzing employee attendance data."},
                {"role": "user", "content": f"Data:\n{text_data}\n\nQuestion: {user_query}"}
            ]
        )
        return response.content[0].text
    except anthropic.APIError as e:
        logger.error(f"Claude API error: {str(e)}")
        raise HTTPException(status_code=502, detail=f"Claude AI service unavailable: {str(e)}")
    except Exception as e:
        logger.error(f"Error generating Claude insights: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Claude AI error: {str(e)}")

@ai_retry
def _get_openai_insights(text_data: str, user_query: str) -> str:
    """Generate insights using OpenAI"""
    try:
        client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are an AI assistant analyzing employee attendance data."},
                {"role": "user", "content": f"Data:\n{text_data}\n\nQuestion: {user_query}"}
            ]
        )
        return response.choices[0].message.content
    except openai.APIError as e:
        logger.error(f"OpenAI API error: {str(e)}")
        raise HTTPException(status_code=502, detail=f"OpenAI service unavailable: {str(e)}")
    except Exception as e:
        logger.error(f"Error generating OpenAI insights: {str(e)}")
        raise HTTPException(status_code=500, detail=f"OpenAI error: {str(e)}")

@ai_retry
def _get_gemini_insights(text_data: str, user_query: str) -> str:
    """Generate insights using Gemini AI"""
    try:
        genai.configure(api_key=settings.GEMINI_API_KEY)
        client = genai.Client()
        response = client.models.generate_content(
            model="gemini-2.0-flash", 
            contents=f"Data:\n{text_data}\n\nQuestion: {user_query}"
        )
        return response.text
    except Exception as e:
        logger.error(f"Error generating Gemini insights: {str(e)}")
        raise HTTPException(status_code=502, detail=f"Gemini AI service unavailable: {str(e)}")

def generate_insights(conn, user_query: Optional[str] = None) -> str:
    """
    Generate AI insights from attendance data
    
    Args:
        conn: Database connection
        user_query: Optional query from the user
        
    Returns:
        Insights text generated by AI
    """
    try:
        # Check if there's any data
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM attendance")
        count = cursor.fetchone()['count']
        
        if count == 0:
            return "No attendance data available for analysis."
        
        # Get attendance data
        text_data = _get_attendance_data(conn)
        
        # Set default query if not provided
        if not user_query:
            user_query = "Provide insights on the attendance data, including patterns, notable absences, and recommendations."
        
        # Choose AI provider based on configuration
        ai_provider = settings.DEFAULT_AI_PROVIDER.lower()
        
        try:
            if ai_provider == "claude":
                return _get_claude_insights(text_data, user_query)
            elif ai_provider == "openai":
                return _get_openai_insights(text_data, user_query)
            else:  # Default to Gemini
                return _get_gemini_insights(text_data, user_query)
        except HTTPException as e:
            # If the primary AI provider fails, fall back to Gemini
            if ai_provider != "gemini":
                logger.warning(f"Falling back to Gemini AI after {ai_provider} failure")
                return _get_gemini_insights(text_data, user_query)
            else:
                raise
            
    except Exception as e:
        logger.error(f"Error generating insights: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Failed to generate insights: {str(e)}")